#procedure symmetryTables()

*// we exploit hypercubic symmetry in the integrand 
*// before passing the expression to an integration routine.
*// These hypercubic tensors were generated by a separate python script.
*================================================================


* // first remove all factors of cosine, in favor of sin-functions
repeat;
  id s(dum1?) * m(dum1?) = 1/2 * b(dum1) ;
endrepeat;

repeat;
  id m(dum1?)^2 = 1 - s(dum1)^2 ;
endrepeat;


* // make shorthand replacements here.
*******************************************
id b(dum1?)*b(dum2?)*b(dum3?)*b(dum4?)*b(dum5?)*b(dum6?)*b(dum7?)*b(dum8?)*b(dum9?)*b(dum10?)*b(dum12?)*b(dum13?)*b(dum14?) = ORDERFOURTEEN;
id b(dum1?)*b(dum2?)*b(dum3?)*b(dum4?)*b(dum5?)*b(dum6?)*b(dum7?)*b(dum8?)*b(dum9?)*b(dum10?)*b(dum12?) = ORDERTWELVE;
id b(dum1?)*b(dum2?)*b(dum3?)*b(dum4?)*b(dum5?)*b(dum6?)*b(dum7?)*b(dum8?)*b(dum9?)*b(dum10?) = ORDERTEN;
id b(dum1?)*b(dum2?)*b(dum3?)*b(dum4?)*b(dum5?)*b(dum6?)*b(dum7?)*b(dum8?) = B(dum1,dum2,dum3,dum4,dum5,dum6,dum7,dum8);
id b(dum1?)*b(dum2?)*b(dum3?)*b(dum4?)*b(dum5?)*b(dum6?) = B(dum1,dum2,dum3,dum4,dum5,dum6);
id b(dum1?)*b(dum2?)*b(dum3?)*b(dum4?) = B(dum1,dum2,dum3,dum4);
id b(dum1?)*b(dum2?) = B(dum1,dum2);
*******************************************


* // order 10 reps 
*id B(dum1?,dum2?,dum3?,dum4?,dum5?,dum6?,dum7?,dum8?,dum9?,dum10?) =


* // order 8 reps - tested once using VEGAS, in full agreement with two external indices.
id B(dum1?,dum2?,dum3?,dum4?,dum5?,dum6?,dum7?,dum8?) = B(dum1)*B(dum2)*B(dum3)*B(dum4)*B(dum5)*B(dum6)*B(dum7)*B(dum8) * (
(
ld(dum1,dum2)*ld(dum3,dum4)*ld(dum5,dum6)*ld(dum7,dum8)
+ld(dum1,dum2)*ld(dum3,dum4)*ld(dum5,dum7)*ld(dum6,dum8)
+ld(dum1,dum2)*ld(dum3,dum4)*ld(dum5,dum8)*ld(dum6,dum7)
+ld(dum1,dum2)*ld(dum3,dum5)*ld(dum4,dum6)*ld(dum7,dum8)
+ld(dum1,dum2)*ld(dum3,dum5)*ld(dum4,dum7)*ld(dum6,dum8)
+ld(dum1,dum2)*ld(dum3,dum5)*ld(dum4,dum8)*ld(dum6,dum7)
+ld(dum1,dum2)*ld(dum3,dum6)*ld(dum4,dum5)*ld(dum7,dum8)
+ld(dum1,dum2)*ld(dum3,dum6)*ld(dum4,dum7)*ld(dum5,dum8)
+ld(dum1,dum2)*ld(dum3,dum6)*ld(dum4,dum8)*ld(dum5,dum7)
+ld(dum1,dum2)*ld(dum3,dum7)*ld(dum4,dum5)*ld(dum6,dum8)
+ld(dum1,dum2)*ld(dum3,dum7)*ld(dum4,dum6)*ld(dum5,dum8)
+ld(dum1,dum2)*ld(dum3,dum7)*ld(dum4,dum8)*ld(dum5,dum6)
+ld(dum1,dum2)*ld(dum3,dum8)*ld(dum4,dum5)*ld(dum6,dum7)
+ld(dum1,dum2)*ld(dum3,dum8)*ld(dum4,dum6)*ld(dum5,dum7)
+ld(dum1,dum2)*ld(dum3,dum8)*ld(dum4,dum7)*ld(dum5,dum6)
+ld(dum1,dum3)*ld(dum2,dum4)*ld(dum5,dum6)*ld(dum7,dum8)
+ld(dum1,dum3)*ld(dum2,dum4)*ld(dum5,dum7)*ld(dum6,dum8)
+ld(dum1,dum3)*ld(dum2,dum4)*ld(dum5,dum8)*ld(dum6,dum7)
+ld(dum1,dum3)*ld(dum2,dum5)*ld(dum4,dum6)*ld(dum7,dum8)
+ld(dum1,dum3)*ld(dum2,dum5)*ld(dum4,dum7)*ld(dum6,dum8)
+ld(dum1,dum3)*ld(dum2,dum5)*ld(dum4,dum8)*ld(dum6,dum7)
+ld(dum1,dum3)*ld(dum2,dum6)*ld(dum4,dum5)*ld(dum7,dum8)
+ld(dum1,dum3)*ld(dum2,dum6)*ld(dum4,dum7)*ld(dum5,dum8)
+ld(dum1,dum3)*ld(dum2,dum6)*ld(dum4,dum8)*ld(dum5,dum7)
+ld(dum1,dum3)*ld(dum2,dum7)*ld(dum4,dum5)*ld(dum6,dum8)
+ld(dum1,dum3)*ld(dum2,dum7)*ld(dum4,dum6)*ld(dum5,dum8)
+ld(dum1,dum3)*ld(dum2,dum7)*ld(dum4,dum8)*ld(dum5,dum6)
+ld(dum1,dum3)*ld(dum2,dum8)*ld(dum4,dum5)*ld(dum6,dum7)
+ld(dum1,dum3)*ld(dum2,dum8)*ld(dum4,dum6)*ld(dum5,dum7)
+ld(dum1,dum3)*ld(dum2,dum8)*ld(dum4,dum7)*ld(dum5,dum6)
+ld(dum1,dum4)*ld(dum2,dum3)*ld(dum5,dum6)*ld(dum7,dum8)
+ld(dum1,dum4)*ld(dum2,dum3)*ld(dum5,dum7)*ld(dum6,dum8)
+ld(dum1,dum4)*ld(dum2,dum3)*ld(dum5,dum8)*ld(dum6,dum7)
+ld(dum1,dum4)*ld(dum2,dum5)*ld(dum3,dum6)*ld(dum7,dum8)
+ld(dum1,dum4)*ld(dum2,dum5)*ld(dum3,dum7)*ld(dum6,dum8)
+ld(dum1,dum4)*ld(dum2,dum5)*ld(dum3,dum8)*ld(dum6,dum7)
+ld(dum1,dum4)*ld(dum2,dum6)*ld(dum3,dum5)*ld(dum7,dum8)
+ld(dum1,dum4)*ld(dum2,dum6)*ld(dum3,dum7)*ld(dum5,dum8)
+ld(dum1,dum4)*ld(dum2,dum6)*ld(dum3,dum8)*ld(dum5,dum7)
+ld(dum1,dum4)*ld(dum2,dum7)*ld(dum3,dum5)*ld(dum6,dum8)
+ld(dum1,dum4)*ld(dum2,dum7)*ld(dum3,dum6)*ld(dum5,dum8)
+ld(dum1,dum4)*ld(dum2,dum7)*ld(dum3,dum8)*ld(dum5,dum6)
+ld(dum1,dum4)*ld(dum2,dum8)*ld(dum3,dum5)*ld(dum6,dum7)
+ld(dum1,dum4)*ld(dum2,dum8)*ld(dum3,dum6)*ld(dum5,dum7)
+ld(dum1,dum4)*ld(dum2,dum8)*ld(dum3,dum7)*ld(dum5,dum6)
+ld(dum1,dum5)*ld(dum2,dum3)*ld(dum4,dum6)*ld(dum7,dum8)
+ld(dum1,dum5)*ld(dum2,dum3)*ld(dum4,dum7)*ld(dum6,dum8)
+ld(dum1,dum5)*ld(dum2,dum3)*ld(dum4,dum8)*ld(dum6,dum7)
+ld(dum1,dum5)*ld(dum2,dum4)*ld(dum3,dum6)*ld(dum7,dum8)
+ld(dum1,dum5)*ld(dum2,dum4)*ld(dum3,dum7)*ld(dum6,dum8)
+ld(dum1,dum5)*ld(dum2,dum4)*ld(dum3,dum8)*ld(dum6,dum7)
+ld(dum1,dum5)*ld(dum2,dum6)*ld(dum3,dum4)*ld(dum7,dum8)
+ld(dum1,dum5)*ld(dum2,dum6)*ld(dum3,dum7)*ld(dum4,dum8)
+ld(dum1,dum5)*ld(dum2,dum6)*ld(dum3,dum8)*ld(dum4,dum7)
+ld(dum1,dum5)*ld(dum2,dum7)*ld(dum3,dum4)*ld(dum6,dum8)
+ld(dum1,dum5)*ld(dum2,dum7)*ld(dum3,dum6)*ld(dum4,dum8)
+ld(dum1,dum5)*ld(dum2,dum7)*ld(dum3,dum8)*ld(dum4,dum6)
+ld(dum1,dum5)*ld(dum2,dum8)*ld(dum3,dum4)*ld(dum6,dum7)
+ld(dum1,dum5)*ld(dum2,dum8)*ld(dum3,dum6)*ld(dum4,dum7)
+ld(dum1,dum5)*ld(dum2,dum8)*ld(dum3,dum7)*ld(dum4,dum6)
+ld(dum1,dum6)*ld(dum2,dum3)*ld(dum4,dum5)*ld(dum7,dum8)
+ld(dum1,dum6)*ld(dum2,dum3)*ld(dum4,dum7)*ld(dum5,dum8)
+ld(dum1,dum6)*ld(dum2,dum3)*ld(dum4,dum8)*ld(dum5,dum7)
+ld(dum1,dum6)*ld(dum2,dum4)*ld(dum3,dum5)*ld(dum7,dum8)
+ld(dum1,dum6)*ld(dum2,dum4)*ld(dum3,dum7)*ld(dum5,dum8)
+ld(dum1,dum6)*ld(dum2,dum4)*ld(dum3,dum8)*ld(dum5,dum7)
+ld(dum1,dum6)*ld(dum2,dum5)*ld(dum3,dum4)*ld(dum7,dum8)
+ld(dum1,dum6)*ld(dum2,dum5)*ld(dum3,dum7)*ld(dum4,dum8)
+ld(dum1,dum6)*ld(dum2,dum5)*ld(dum3,dum8)*ld(dum4,dum7)
+ld(dum1,dum6)*ld(dum2,dum7)*ld(dum3,dum4)*ld(dum5,dum8)
+ld(dum1,dum6)*ld(dum2,dum7)*ld(dum3,dum5)*ld(dum4,dum8)
+ld(dum1,dum6)*ld(dum2,dum7)*ld(dum3,dum8)*ld(dum4,dum5)
+ld(dum1,dum6)*ld(dum2,dum8)*ld(dum3,dum4)*ld(dum5,dum7)
+ld(dum1,dum6)*ld(dum2,dum8)*ld(dum3,dum5)*ld(dum4,dum7)
+ld(dum1,dum6)*ld(dum2,dum8)*ld(dum3,dum7)*ld(dum4,dum5)
+ld(dum1,dum7)*ld(dum2,dum3)*ld(dum4,dum5)*ld(dum6,dum8)
+ld(dum1,dum7)*ld(dum2,dum3)*ld(dum4,dum6)*ld(dum5,dum8)
+ld(dum1,dum7)*ld(dum2,dum3)*ld(dum4,dum8)*ld(dum5,dum6)
+ld(dum1,dum7)*ld(dum2,dum4)*ld(dum3,dum5)*ld(dum6,dum8)
+ld(dum1,dum7)*ld(dum2,dum4)*ld(dum3,dum6)*ld(dum5,dum8)
+ld(dum1,dum7)*ld(dum2,dum4)*ld(dum3,dum8)*ld(dum5,dum6)
+ld(dum1,dum7)*ld(dum2,dum5)*ld(dum3,dum4)*ld(dum6,dum8)
+ld(dum1,dum7)*ld(dum2,dum5)*ld(dum3,dum6)*ld(dum4,dum8)
+ld(dum1,dum7)*ld(dum2,dum5)*ld(dum3,dum8)*ld(dum4,dum6)
+ld(dum1,dum7)*ld(dum2,dum6)*ld(dum3,dum4)*ld(dum5,dum8)
+ld(dum1,dum7)*ld(dum2,dum6)*ld(dum3,dum5)*ld(dum4,dum8)
+ld(dum1,dum7)*ld(dum2,dum6)*ld(dum3,dum8)*ld(dum4,dum5)
+ld(dum1,dum7)*ld(dum2,dum8)*ld(dum3,dum4)*ld(dum5,dum6)
+ld(dum1,dum7)*ld(dum2,dum8)*ld(dum3,dum5)*ld(dum4,dum6)
+ld(dum1,dum7)*ld(dum2,dum8)*ld(dum3,dum6)*ld(dum4,dum5)
+ld(dum1,dum8)*ld(dum2,dum3)*ld(dum4,dum5)*ld(dum6,dum7)
+ld(dum1,dum8)*ld(dum2,dum3)*ld(dum4,dum6)*ld(dum5,dum7)
+ld(dum1,dum8)*ld(dum2,dum3)*ld(dum4,dum7)*ld(dum5,dum6)
+ld(dum1,dum8)*ld(dum2,dum4)*ld(dum3,dum5)*ld(dum6,dum7)
+ld(dum1,dum8)*ld(dum2,dum4)*ld(dum3,dum6)*ld(dum5,dum7)
+ld(dum1,dum8)*ld(dum2,dum4)*ld(dum3,dum7)*ld(dum5,dum6)
+ld(dum1,dum8)*ld(dum2,dum5)*ld(dum3,dum4)*ld(dum6,dum7)
+ld(dum1,dum8)*ld(dum2,dum5)*ld(dum3,dum6)*ld(dum4,dum7)
+ld(dum1,dum8)*ld(dum2,dum5)*ld(dum3,dum7)*ld(dum4,dum6)
+ld(dum1,dum8)*ld(dum2,dum6)*ld(dum3,dum4)*ld(dum5,dum7)
+ld(dum1,dum8)*ld(dum2,dum6)*ld(dum3,dum5)*ld(dum4,dum7)
+ld(dum1,dum8)*ld(dum2,dum6)*ld(dum3,dum7)*ld(dum4,dum5)
+ld(dum1,dum8)*ld(dum2,dum7)*ld(dum3,dum4)*ld(dum5,dum6)
+ld(dum1,dum8)*ld(dum2,dum7)*ld(dum3,dum5)*ld(dum4,dum6)
+ld(dum1,dum8)*ld(dum2,dum7)*ld(dum3,dum6)*ld(dum4,dum5))
+(
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum5,dum6)*ld(dum7,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum5,dum7)*ld(dum6,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum5,dum8)*ld(dum6,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum4,dum6)*ld(dum7,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum4,dum7)*ld(dum6,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum4,dum8)*ld(dum6,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum4,dum5)*ld(dum7,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum4,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum4,dum8)*ld(dum5,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum7)*ld(dum4,dum5)*ld(dum6,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum7)*ld(dum4,dum6)*ld(dum5,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum7)*ld(dum4,dum8)*ld(dum5,dum6)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum8)*ld(dum4,dum5)*ld(dum6,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum8)*ld(dum4,dum6)*ld(dum5,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum8)*ld(dum4,dum7)*ld(dum5,dum6)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum3,dum6)*ld(dum7,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum3,dum7)*ld(dum6,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum3,dum8)*ld(dum6,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum3,dum5)*ld(dum7,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum3,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum3,dum8)*ld(dum5,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum3,dum5)*ld(dum6,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum3,dum6)*ld(dum5,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum3,dum8)*ld(dum5,dum6)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum8)*ld(dum3,dum5)*ld(dum6,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum8)*ld(dum3,dum6)*ld(dum5,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum8)*ld(dum3,dum7)*ld(dum5,dum6)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum3,dum4)*ld(dum7,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum3,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum3,dum8)*ld(dum4,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum3,dum4)*ld(dum6,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum3,dum6)*ld(dum4,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum3,dum8)*ld(dum4,dum6)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum3,dum4)*ld(dum6,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum3,dum6)*ld(dum4,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum3,dum7)*ld(dum4,dum6)
-2*ld(dum1,dum2)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum3,dum4)*ld(dum5,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum3,dum5)*ld(dum4,dum8)
-2*ld(dum1,dum2)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum3,dum8)*ld(dum4,dum5)
-2*ld(dum1,dum2)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum3,dum4)*ld(dum5,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum3,dum5)*ld(dum4,dum7)
-2*ld(dum1,dum2)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum3,dum7)*ld(dum4,dum5)
-2*ld(dum1,dum2)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum3,dum4)*ld(dum5,dum6)
-2*ld(dum1,dum2)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum3,dum5)*ld(dum4,dum6)
-2*ld(dum1,dum2)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum3,dum6)*ld(dum4,dum5)
-2*ld(dum1,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum7,dum8)
-2*ld(dum1,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum6,dum8)
-2*ld(dum1,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum8)*ld(dum6,dum7)
-2*ld(dum1,dum2)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum2)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum8)*ld(dum5,dum7)
-2*ld(dum1,dum2)*ld(dum3,dum4)*ld(dum3,dum7)*ld(dum3,dum8)*ld(dum5,dum6)
-2*ld(dum1,dum2)*ld(dum3,dum4)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum2)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum2)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum8)*ld(dum4,dum7)
-2*ld(dum1,dum2)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum3,dum8)*ld(dum4,dum6)
-2*ld(dum1,dum2)*ld(dum3,dum5)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum2)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)*ld(dum4,dum5)
-2*ld(dum1,dum2)*ld(dum3,dum6)*ld(dum4,dum5)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum2)*ld(dum3,dum7)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum8)
-2*ld(dum1,dum2)*ld(dum3,dum8)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum2,dum6)*ld(dum7,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum2,dum7)*ld(dum6,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum2,dum8)*ld(dum6,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum2,dum5)*ld(dum7,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum2,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum2,dum8)*ld(dum5,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum2,dum5)*ld(dum6,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum2,dum6)*ld(dum5,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum2,dum8)*ld(dum5,dum6)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum6,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum8)*ld(dum2,dum6)*ld(dum5,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum8)*ld(dum2,dum7)*ld(dum5,dum6)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum2,dum4)*ld(dum7,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum2,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum2,dum8)*ld(dum4,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum6,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum2,dum6)*ld(dum4,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum2,dum8)*ld(dum4,dum6)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum6,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum2,dum6)*ld(dum4,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum2,dum7)*ld(dum4,dum6)
-2*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum5,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum5)*ld(dum4,dum8)
-2*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum8)*ld(dum4,dum5)
-2*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum5,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum4,dum7)
-2*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum7)*ld(dum4,dum5)
-2*ld(dum1,dum3)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum5,dum6)
-2*ld(dum1,dum3)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum4,dum6)
-2*ld(dum1,dum3)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum6)*ld(dum4,dum5)
-2*ld(dum1,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum7,dum8)
-2*ld(dum1,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum6,dum8)
-2*ld(dum1,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum8)*ld(dum6,dum7)
-2*ld(dum1,dum3)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum3)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum5,dum7)
-2*ld(dum1,dum3)*ld(dum2,dum4)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum5,dum6)
-2*ld(dum1,dum3)*ld(dum2,dum4)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum3)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum3)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum4,dum7)
-2*ld(dum1,dum3)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum4,dum6)
-2*ld(dum1,dum3)*ld(dum2,dum5)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum3)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum4,dum5)
-2*ld(dum1,dum3)*ld(dum2,dum6)*ld(dum4,dum5)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum3)*ld(dum2,dum7)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum8)
-2*ld(dum1,dum3)*ld(dum2,dum8)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum7,dum8)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum2,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum2,dum8)*ld(dum3,dum7)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum6,dum8)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum2,dum6)*ld(dum3,dum8)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum2,dum8)*ld(dum3,dum6)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum6,dum7)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum2,dum6)*ld(dum3,dum7)
-2*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum2,dum7)*ld(dum3,dum6)
-2*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum5,dum8)
-2*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum5)*ld(dum3,dum8)
-2*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum8)*ld(dum3,dum5)
-2*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum5,dum7)
-2*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum3,dum7)
-2*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum7)*ld(dum3,dum5)
-2*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum5,dum6)
-2*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum3,dum6)
-2*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum6)*ld(dum3,dum5)
-2*ld(dum1,dum4)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum7,dum8)
-2*ld(dum1,dum4)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum6,dum8)
-2*ld(dum1,dum4)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum8)*ld(dum6,dum7)
-2*ld(dum1,dum4)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum4)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum5,dum7)
-2*ld(dum1,dum4)*ld(dum2,dum3)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum5,dum6)
-2*ld(dum1,dum4)*ld(dum2,dum3)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum3,dum7)
-2*ld(dum1,dum4)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum6)
-2*ld(dum1,dum4)*ld(dum2,dum5)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum4)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum5)
-2*ld(dum1,dum4)*ld(dum2,dum6)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum4)*ld(dum2,dum7)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum8)
-2*ld(dum1,dum4)*ld(dum2,dum8)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)
-2*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum4,dum8)
-2*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum3,dum8)
-2*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum8)*ld(dum3,dum4)
-2*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum4,dum7)
-2*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum3,dum7)
-2*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum7)*ld(dum3,dum4)
-2*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum4,dum6)
-2*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum3,dum6)
-2*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum6)*ld(dum3,dum4)
-2*ld(dum1,dum5)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum7,dum8)
-2*ld(dum1,dum5)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum7)*ld(dum6,dum8)
-2*ld(dum1,dum5)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum8)*ld(dum6,dum7)
-2*ld(dum1,dum5)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum5)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum4,dum7)
-2*ld(dum1,dum5)*ld(dum2,dum3)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum4,dum6)
-2*ld(dum1,dum5)*ld(dum2,dum3)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum5)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum5)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum3,dum7)
-2*ld(dum1,dum5)*ld(dum2,dum4)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum6)
-2*ld(dum1,dum5)*ld(dum2,dum4)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum4)
-2*ld(dum1,dum5)*ld(dum2,dum6)*ld(dum3,dum4)*ld(dum3,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum5)*ld(dum2,dum7)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum8)
-2*ld(dum1,dum5)*ld(dum2,dum8)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum7)
-2*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum4,dum5)
-2*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum3,dum5)
-2*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum3,dum4)
-2*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum7,dum8)
-2*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum8)*ld(dum5,dum7)
-2*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum8)*ld(dum4,dum7)
-2*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum4,dum5)
-2*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum4,dum5)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum6)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum6)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum8)*ld(dum3,dum7)
-2*ld(dum1,dum6)*ld(dum2,dum4)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum5)
-2*ld(dum1,dum6)*ld(dum2,dum4)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum6)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum4)
-2*ld(dum1,dum6)*ld(dum2,dum5)*ld(dum3,dum4)*ld(dum3,dum7)*ld(dum3,dum8)
-2*ld(dum1,dum6)*ld(dum2,dum7)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum8)
-2*ld(dum1,dum6)*ld(dum2,dum8)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum7)
-2*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum6,dum8)
-2*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum5,dum8)
-2*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum8)*ld(dum5,dum6)
-2*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum4,dum8)
-2*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum8)*ld(dum4,dum6)
-2*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum4,dum5)
-2*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum8)
-2*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum3,dum8)
-2*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum8)*ld(dum3,dum6)
-2*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum3,dum5)
-2*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum8)
-2*ld(dum1,dum7)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum3,dum4)
-2*ld(dum1,dum7)*ld(dum2,dum5)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum8)
-2*ld(dum1,dum7)*ld(dum2,dum6)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum8)
-2*ld(dum1,dum7)*ld(dum2,dum8)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)
-2*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum6,dum7)
-2*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum5,dum7)
-2*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum7)*ld(dum5,dum6)
-2*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum4,dum7)
-2*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum4,dum6)
-2*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum4,dum5)
-2*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)
-2*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum3,dum7)
-2*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum3,dum6)
-2*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum3,dum5)
-2*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)
-2*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum3,dum4)
-2*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum7)
-2*ld(dum1,dum8)*ld(dum2,dum6)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum7)
-2*ld(dum1,dum8)*ld(dum2,dum7)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6))
+(
26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum7,dum8)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum6,dum8)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum6,dum7)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum5,dum8)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum5,dum7)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum5,dum6)
+4*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum4,dum8)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum4,dum7)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum4,dum6)
+4*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
+26*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum4,dum5)
+4*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum4,dum5)*ld(dum4,dum7)*ld(dum4,dum8)
+4*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum7)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum8)
+4*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum8)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)
+26*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum3,dum8)
+26*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum3,dum7)
+26*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum3,dum6)
+4*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
+26*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum3,dum5)
+4*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum3,dum8)
+4*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum8)
+4*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum8)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)
+26*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum3,dum4)
+4*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum3,dum4)*ld(dum3,dum7)*ld(dum3,dum8)
+4*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum8)
+4*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum7)
+4*ld(dum1,dum2)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum8)
+4*ld(dum1,dum2)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum7)
+4*ld(dum1,dum2)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)
+26*ld(dum1,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
-4*ld(dum1,dum2)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-3*ld(dum1,dum2)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum2)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum1,dum2)*ld(dum7,dum3)*ld(dum7,dum4)*ld(dum7,dum5)*ld(dum7,dum6)*ld(dum7,dum8)
+26*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum8)
+26*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum7)
+26*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum6)
+4*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)
+26*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum5)
+4*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum2,dum8)
+4*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum8)
+4*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum8)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)
+26*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum4)
+4*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum2,dum4)*ld(dum2,dum7)*ld(dum2,dum8)
+4*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum8)
+4*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum7)
+4*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum8)
+4*ld(dum1,dum3)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum7)
+4*ld(dum1,dum3)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)
+26*ld(dum1,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)
-4*ld(dum1,dum3)*ld(dum4,dum2)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-3*ld(dum1,dum3)*ld(dum5,dum2)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum3)*ld(dum6,dum2)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum1,dum3)*ld(dum7,dum2)*ld(dum7,dum4)*ld(dum7,dum5)*ld(dum7,dum6)*ld(dum7,dum8)
+26*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum3)
+4*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum7)*ld(dum2,dum8)
+4*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum8)
+4*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum7)
+4*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum8)
+4*ld(dum1,dum4)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum7)
+4*ld(dum1,dum4)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum6)
+26*ld(dum1,dum4)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)
-4*ld(dum1,dum4)*ld(dum3,dum2)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
-3*ld(dum1,dum4)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum1,dum4)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum5)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum1,dum4)*ld(dum7,dum2)*ld(dum7,dum3)*ld(dum7,dum5)*ld(dum7,dum6)*ld(dum7,dum8)
+4*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum8)
+4*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum7)
+4*ld(dum1,dum5)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum6)
+26*ld(dum1,dum5)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)
-4*ld(dum1,dum5)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
-3*ld(dum1,dum5)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum5)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum1,dum5)*ld(dum7,dum2)*ld(dum7,dum3)*ld(dum7,dum4)*ld(dum7,dum6)*ld(dum7,dum8)
+4*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)
+26*ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum2,dum8)
-4*ld(dum1,dum6)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum3,dum8)
-3*ld(dum1,dum6)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum1,dum6)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum7)*ld(dum5,dum8)
-ld(dum1,dum6)*ld(dum7,dum2)*ld(dum7,dum3)*ld(dum7,dum4)*ld(dum7,dum5)*ld(dum7,dum8)
+26*ld(dum1,dum7)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum8)
-4*ld(dum1,dum7)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum8)
-3*ld(dum1,dum7)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum8)
-2*ld(dum1,dum7)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum8)
-ld(dum1,dum7)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum8)
+26*ld(dum1,dum8)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)
-4*ld(dum1,dum8)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)
-3*ld(dum1,dum8)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)
-2*ld(dum1,dum8)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum7)
-ld(dum1,dum8)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum7)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum7,dum8)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum6,dum8)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum8)*ld(dum6,dum7)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum5,dum8)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum5,dum7)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum5,dum6)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum4,dum8)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum4,dum7)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum4,dum6)
-4*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum4,dum5)
-4*ld(dum2,dum1)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum3,dum8)
-4*ld(dum2,dum1)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum8)*ld(dum3,dum7)
-4*ld(dum2,dum1)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum6)
-4*ld(dum2,dum1)*ld(dum2,dum4)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum5)
-4*ld(dum2,dum1)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)*ld(dum3,dum4)
-4*ld(dum2,dum3)*ld(dum4,dum1)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-3*ld(dum2,dum3)*ld(dum5,dum1)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum2,dum3)*ld(dum6,dum1)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum2,dum3)*ld(dum7,dum1)*ld(dum7,dum4)*ld(dum7,dum5)*ld(dum7,dum6)*ld(dum7,dum8)
-4*ld(dum2,dum4)*ld(dum3,dum1)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
-3*ld(dum2,dum4)*ld(dum5,dum1)*ld(dum5,dum3)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum2,dum4)*ld(dum6,dum1)*ld(dum6,dum3)*ld(dum6,dum5)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum2,dum4)*ld(dum7,dum1)*ld(dum7,dum3)*ld(dum7,dum5)*ld(dum7,dum6)*ld(dum7,dum8)
-4*ld(dum2,dum5)*ld(dum3,dum1)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
-3*ld(dum2,dum5)*ld(dum4,dum1)*ld(dum4,dum3)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum2,dum5)*ld(dum6,dum1)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum2,dum5)*ld(dum7,dum1)*ld(dum7,dum3)*ld(dum7,dum4)*ld(dum7,dum6)*ld(dum7,dum8)
-4*ld(dum2,dum6)*ld(dum3,dum1)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum3,dum8)
-3*ld(dum2,dum6)*ld(dum4,dum1)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum2,dum6)*ld(dum5,dum1)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum7)*ld(dum5,dum8)
-ld(dum2,dum6)*ld(dum7,dum1)*ld(dum7,dum3)*ld(dum7,dum4)*ld(dum7,dum5)*ld(dum7,dum8)
-4*ld(dum2,dum7)*ld(dum3,dum1)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum8)
-3*ld(dum2,dum7)*ld(dum4,dum1)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum8)
-2*ld(dum2,dum7)*ld(dum5,dum1)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum8)
-ld(dum2,dum7)*ld(dum6,dum1)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum8)
-4*ld(dum2,dum8)*ld(dum3,dum1)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)
-3*ld(dum2,dum8)*ld(dum4,dum1)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)
-2*ld(dum2,dum8)*ld(dum5,dum1)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum7)
-ld(dum2,dum8)*ld(dum6,dum1)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum7)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum7,dum8)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum6,dum8)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum8)*ld(dum6,dum7)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum5,dum8)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum6)*ld(dum3,dum8)*ld(dum5,dum7)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum7)*ld(dum3,dum8)*ld(dum5,dum6)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum4,dum8)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum8)*ld(dum4,dum7)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum5)*ld(dum3,dum7)*ld(dum3,dum8)*ld(dum4,dum6)
-3*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)*ld(dum4,dum5)
-3*ld(dum3,dum4)*ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum3,dum4)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum5)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum3,dum4)*ld(dum7,dum1)*ld(dum7,dum2)*ld(dum7,dum5)*ld(dum7,dum6)*ld(dum7,dum8)
-3*ld(dum3,dum5)*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum3,dum5)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum4)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum3,dum5)*ld(dum7,dum1)*ld(dum7,dum2)*ld(dum7,dum4)*ld(dum7,dum6)*ld(dum7,dum8)
-3*ld(dum3,dum6)*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum5)*ld(dum4,dum7)*ld(dum4,dum8)
-2*ld(dum3,dum6)*ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum4)*ld(dum5,dum7)*ld(dum5,dum8)
-ld(dum3,dum6)*ld(dum7,dum1)*ld(dum7,dum2)*ld(dum7,dum4)*ld(dum7,dum5)*ld(dum7,dum8)
-3*ld(dum3,dum7)*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum8)
-2*ld(dum3,dum7)*ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum8)
-ld(dum3,dum7)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum8)
-3*ld(dum3,dum8)*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)
-2*ld(dum3,dum8)*ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum7)
-ld(dum3,dum8)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum7)
-2*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum7,dum8)
-2*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum7)*ld(dum6,dum8)
-2*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum8)*ld(dum6,dum7)
-2*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum5,dum8)
-2*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum6)*ld(dum4,dum8)*ld(dum5,dum7)
-2*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum7)*ld(dum4,dum8)*ld(dum5,dum6)
-2*ld(dum4,dum5)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum4,dum5)*ld(dum7,dum1)*ld(dum7,dum2)*ld(dum7,dum3)*ld(dum7,dum6)*ld(dum7,dum8)
-2*ld(dum4,dum6)*ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum7)*ld(dum5,dum8)
-ld(dum4,dum6)*ld(dum7,dum1)*ld(dum7,dum2)*ld(dum7,dum3)*ld(dum7,dum5)*ld(dum7,dum8)
-2*ld(dum4,dum7)*ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum6)*ld(dum5,dum8)
-ld(dum4,dum7)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum5)*ld(dum6,dum8)
-2*ld(dum4,dum8)*ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum6)*ld(dum5,dum7)
-ld(dum4,dum8)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum5)*ld(dum6,dum7)
-ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum7,dum8)
-ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum7)*ld(dum6,dum8)
-ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum8)*ld(dum6,dum7)
-ld(dum5,dum6)*ld(dum7,dum1)*ld(dum7,dum2)*ld(dum7,dum3)*ld(dum7,dum4)*ld(dum7,dum8)
-ld(dum5,dum7)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum8)
-ld(dum5,dum8)*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum7))
+(
-461*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)*ld(dum1,dum7)*ld(dum1,dum8)
+114*ld(dum2,dum1)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)*ld(dum2,dum7)*ld(dum2,dum8)
+55*ld(dum3,dum1)*ld(dum3,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)*ld(dum3,dum7)*ld(dum3,dum8)
+20*ld(dum4,dum1)*ld(dum4,dum2)*ld(dum4,dum3)*ld(dum4,dum5)*ld(dum4,dum6)*ld(dum4,dum7)*ld(dum4,dum8)
+3*ld(dum5,dum1)*ld(dum5,dum2)*ld(dum5,dum3)*ld(dum5,dum4)*ld(dum5,dum6)*ld(dum5,dum7)*ld(dum5,dum8)
-2*ld(dum6,dum1)*ld(dum6,dum2)*ld(dum6,dum3)*ld(dum6,dum4)*ld(dum6,dum5)*ld(dum6,dum7)*ld(dum6,dum8)
-ld(dum7,dum1)*ld(dum7,dum2)*ld(dum7,dum3)*ld(dum7,dum4)*ld(dum7,dum5)*ld(dum7,dum6)*ld(dum7,dum8))
) ;


*# order 6 reps - correct result.
id B(dum1?,dum2?,dum3?,dum4?,dum5?,dum6?) =                                              
                                            B(dum1)*B(dum2)*B(dum3)*B(dum4)*B(dum5)*B(dum6)
                                         *  (ld(dum1,dum2)*ld(dum3,dum4)*ld(dum5,dum6)
                                         +   ld(dum1,dum2)*ld(dum3,dum5)*ld(dum4,dum6)
                                         +   ld(dum1,dum2)*ld(dum3,dum6)*ld(dum4,dum5)
                                         +   ld(dum1,dum3)*ld(dum2,dum4)*ld(dum5,dum6)
                                         +   ld(dum1,dum3)*ld(dum2,dum5)*ld(dum4,dum6)
                                         +   ld(dum1,dum3)*ld(dum2,dum6)*ld(dum4,dum5)
                                         +   ld(dum1,dum4)*ld(dum2,dum3)*ld(dum5,dum6)
                                         +   ld(dum1,dum4)*ld(dum2,dum5)*ld(dum3,dum6)
                                         +   ld(dum1,dum4)*ld(dum2,dum6)*ld(dum3,dum5)
                                         +   ld(dum1,dum5)*ld(dum2,dum3)*ld(dum4,dum6)
                                         +   ld(dum1,dum5)*ld(dum2,dum4)*ld(dum3,dum6)
                                         +   ld(dum1,dum5)*ld(dum2,dum6)*ld(dum3,dum4)
                                         +   ld(dum1,dum6)*ld(dum2,dum3)*ld(dum4,dum5)
                                         +   ld(dum1,dum6)*ld(dum2,dum4)*ld(dum3,dum5)
                                         +   ld(dum1,dum6)*ld(dum2,dum5)*ld(dum3,dum4)
                                         -2*(ld(dum1,dum2)*ld(dum3,dum4)*ld(dum3,dum5)*ld(dum3,dum6)
                                         +   ld(dum1,dum3)*ld(dum2,dum4)*ld(dum2,dum5)*ld(dum2,dum6)
                                         +   ld(dum1,dum4)*ld(dum2,dum3)*ld(dum2,dum5)*ld(dum2,dum6)
                                         +   ld(dum1,dum5)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum6)
                                         +   ld(dum1,dum6)*ld(dum2,dum3)*ld(dum2,dum4)*ld(dum2,dum5)
                                         +   ld(dum2,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)
                                         +   ld(dum2,dum4)*ld(dum1,dum3)*ld(dum1,dum5)*ld(dum1,dum6)
                                         +   ld(dum2,dum5)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum6)
                                         +   ld(dum2,dum6)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)
                                         +   ld(dum3,dum4)*ld(dum1,dum2)*ld(dum1,dum5)*ld(dum1,dum6)
                                         +   ld(dum3,dum5)*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum6)
                                         +   ld(dum3,dum6)*ld(dum1,dum2)*ld(dum1,dum4)*ld(dum1,dum5)
                                         +   ld(dum4,dum5)*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum6)
                                         +   ld(dum4,dum6)*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum5)
                                         +   ld(dum5,dum6)*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4))
                                        +16*(ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4)*ld(dum1,dum5)*ld(dum1,dum6)) );


*# order 4 reps - TESTED against FORTRAN integrations and all tries check perfectly, 
id B(dum1?,dum2?,dum3?,dum4?) = B(dum1)*B(dum2)*B(dum3)*B(dum4)*(ld(dum1,dum3)*ld(dum2,dum4)+ld(dum1,dum4)*ld(dum2,dum3)+ld(dum1,dum2)*ld(dum3,dum4)-2*ld(dum1,dum2)*ld(dum1,dum3)*ld(dum1,dum4));

*# order 2 reps
id B(dum1?,dum2?) = B(dum1)*B(dum2)*ld(dum1,dum2);

*#------------------------------------------------------------------------------------------------------
*#  end symmetry tables
*#------------------------------------------------------------------------------------------------------
*# scale B factors to be sure only even multiples of them remain
id B(dum1?) = sf * b(dum1) ;
id b(dum1?) = sf * b(dum1) ;
*id s(dum1?) = sf * s(dum1) ;
id sf^pow?!even_ = 0 ;
id sf = 1 ;

*# kill sig terms here
id sig(dum1?, dum2?) * ld(dum1?,dum2?) = 0;
id sig(dum1?, dum2?) * ld(dum2?,dum1?) = 0;
id sig(dum2?, dum1?) * ld(dum1?,dum2?) = 0;
id sig(dum2?, dum1?) * ld(dum2?,dum1?) = 0;

*# end symmetry replacements
repeat;
  id ld(dum1?,dum2?) = d(dum1,dum2);
endrepeat;

contract;
